BITS 16
ORG 0x7C00

start:
    cli
    xor ax, ax
    mov ds, ax
    mov es, ax
    mov ss, ax
    mov sp, 0x7C00

    ; === Set video mode 80x25 text ===
    mov ax, 0x0003
    int 0x10

    ; === Load kernel from disk ===
    mov ah, 0x02        ; BIOS read sectors
    mov al, 20          ; number of sectors to read
    mov ch, 0           ; cylinder
    mov cl, 2           ; sector (start from 2, since sector 1 is bootloader)
    mov dh, 0           ; head
    mov dl, 0x80        ; first hard disk
    mov bx, 0x1000      ; load to 0x1000:0000
    mov es, bx
    xor bx, bx
    int 0x13
    jc disk_error

    ; === Enter protected mode ===
    cli
    lgdt [gdt_descriptor]

    mov eax, cr0
    or eax, 1
    mov cr0, eax

    jmp CODE_SEG:init_pm

disk_error:
    mov ah, 0x0E
    mov al, 'E'
    int 0x10
hang:
    hlt
    jmp hang

; ---------------------------
; GDT setup
; ---------------------------
gdt_start:
    dq 0x0000000000000000     ; null descriptor
    dq 0x00CF9A000000FFFF     ; code segment
    dq 0x00CF92000000FFFF     ; data segment
gdt_end:

gdt_descriptor:
    dw gdt_end - gdt_start - 1
    dd gdt_start

CODE_SEG equ 0x08
DATA_SEG equ 0x10

; ---------------------------
; 32-bit mode entry
; ---------------------------
[BITS 32]
init_pm:
    mov ax, DATA_SEG
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax
    mov ss, ax
    mov esp, 0x90000

    ; Jump to loaded kernel at 0x10000
    call 0x10000

hang_pm:
    hlt
    jmp hang_pm

; Boot sector signature
times 510-($-$$) db 0
dw 0xAA55
